<?xml version ="1"?>

<launch>
<arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="true"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="true"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <!--group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg mav_name)"/>
      <arg name="y" value="0.0"/>
      <arg name="x" value="0.0"/>
      <arg name="z" value="0.0"/>
    </include>

     <node name="mav_fmpc" pkg="mav_fmpc_multi_robot" type="fmpc_node" respawn="true" clear_params="true" output="screen">
     <rosparam file="$(find mav_fmpc_multi_robot)/resources/fmpc_$(arg mav_name).yaml" />
     </node>
	<node name="Stateread" pkg="asl_msgs" type="stateread" respawn="true" clear_params="true" output="log">
        <param name="robot_number" value="1"/>
        <param name="publisher_dt" value="0.01"/>
        </node>
    <node name="waypoint_publisher" pkg="mav_fmpc_multi_robot" type="waypoint_publisher" output="screen" args="0 0 1 0 2"/>

<node name="low_level_control" pkg="mav_low_level_control" type="low_level_control_node" respawn="true" clear_params="true" output="screen">
<rosparam file="$(find mav_low_level_control)/resources/low_level_control_$(arg mav_name).yaml" />
</node>

<node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

</group-->


<group ns="$(arg mav_name)2">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)2" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg mav_name)2"/>
      <arg name="x" value="1.0"/>
      <arg name="y" value="0.0"/>
      <arg name="z" value="0.0"/> 	
    </include>
    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node" respawn="true" clear_params="true" output="log">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_linear_mpc)/resources/linear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="verbose" value="true" />
      <param name="use_rc_teleop" value="false" />
      <param name="reference_frame" value="world" />
    </node>
<node name="low_level_control" pkg="mav_low_level_control" type="low_level_control_node" respawn="true" clear_params="true" output="screen">
<rosparam file="$(find mav_low_level_control)/resources/low_level_control_$(arg mav_name).yaml" />
</node>
<node name="pid_low_level_control" pkg="mav_low_level_control" type="pid_low_level_control_node" respawn="true" clear_params="true" output="screen">
<rosparam file="$(find mav_low_level_control)/resources/pid_$(arg mav_name).yaml" />
<remap from="odometry" to="ground_truth/odometry" />
</node>
    <!--node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node-->
    <node name="waypoint_publisher2" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="1 -3 2 0 8"/>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="1 0 2 270 2"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
</group>
   
</launch>
